name: Carrentino CI/CD

on:
  push:
    branches:
      - feature/add-minio-to-cicd

jobs:
  tests:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:15.0
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      minio:
        image: grigoleg/minio
        env:
          MINIO_ACCESS_KEY: minio
          MINIO_SECRET_KEY: minio
        ports:
          - 9000:9000
          - 9001:9001
        options: --name=minio
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./car_rent/requirements.txt 

    - name: pytest
      env:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: postgres
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        SECRET_KEY: django-insecure-i3oa78jvvn)y(yvx)_zo$(uxp4$jw4c*dub1bl6#&u5mf&x_ix
        AWS_STORAGE_BUCKET_NAME: bucket
        AWS_ACCESS_KEY_ID: minio
        AWS_SECRET_ACCESS_KEY: minio
        AWS_S3_ENDPOINT_URL: http://localhost:9000
      run: |
        mkdir car_rent/logs
        cd car_rent
        export DJANGO_SETTINGS_MODULE=config.settings
        python manage.py makemigrations --dry-run --check
        python manage.py migrate
        cd ../
        pytest

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-22.04
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./car_rent
          push: true
          tags: grigoleg/car_rent_backend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway
          push: true
          tags: grigoleg/car_rent_gateway:latest
  deploy:
    runs-on: ubuntu-22.04
    needs: 
      - build_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.prod.yml"
        target: "foodgram"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd /home/car-rent
          sudo docker compose -f docker-compose.prod.yml pull
          sudo docker compose -f docker-compose.prod.yml down
          sudo docker compose -f docker-compose.prod.yml up -d
          sudo docker compose -f docker-compose.prod.yml exec backend python manage.py migrate

  send_success_message:
    runs-on: ubuntu-22.04
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: заебок, все по кайфу ✅

  send_failure_message:
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Ебаный рот, пиздуй дебажить ❌